// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: store_devices.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createStoreDevice = `-- name: CreateStoreDevice :one
INSERT INTO store_devices (store_id, device_id, name, real_type, display_type, state)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (store_id, device_id) DO NOTHING
RETURNING store_id, device_id, name, real_type, display_type, state, created_at
`

type CreateStoreDeviceParams struct {
	StoreID     uuid.UUID
	DeviceID    string
	Name        string
	RealType    string
	DisplayType string
	State       string
}

func (q *Queries) CreateStoreDevice(ctx context.Context, arg CreateStoreDeviceParams) (StoreDevice, error) {
	row := q.db.QueryRowContext(ctx, createStoreDevice,
		arg.StoreID,
		arg.DeviceID,
		arg.Name,
		arg.RealType,
		arg.DisplayType,
		arg.State,
	)
	var i StoreDevice
	err := row.Scan(
		&i.StoreID,
		&i.DeviceID,
		&i.Name,
		&i.RealType,
		&i.DisplayType,
		&i.State,
		&i.CreatedAt,
	)
	return i, err
}

const getStoreDevice = `-- name: GetStoreDevice :one
SELECT store_id, device_id, name, real_type, display_type, state, created_at
FROM store_devices
WHERE store_id = $1 AND device_id = $2
`

type GetStoreDeviceParams struct {
	StoreID  uuid.UUID
	DeviceID string
}

func (q *Queries) GetStoreDevice(ctx context.Context, arg GetStoreDeviceParams) (StoreDevice, error) {
	row := q.db.QueryRowContext(ctx, getStoreDevice, arg.StoreID, arg.DeviceID)
	var i StoreDevice
	err := row.Scan(
		&i.StoreID,
		&i.DeviceID,
		&i.Name,
		&i.RealType,
		&i.DisplayType,
		&i.State,
		&i.CreatedAt,
	)
	return i, err
}

const getStoreDevices = `-- name: GetStoreDevices :many
SELECT store_id, device_id, name, real_type, display_type, state, created_at
FROM store_devices
WHERE store_id = $1
`

func (q *Queries) GetStoreDevices(ctx context.Context, storeID uuid.UUID) ([]StoreDevice, error) {
	rows, err := q.db.QueryContext(ctx, getStoreDevices, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StoreDevice{}
	for rows.Next() {
		var i StoreDevice
		if err := rows.Scan(
			&i.StoreID,
			&i.DeviceID,
			&i.Name,
			&i.RealType,
			&i.DisplayType,
			&i.State,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setStoreDeviceNameAndDisplayType = `-- name: SetStoreDeviceNameAndDisplayType :exec
UPDATE store_devices
SET name = $3, display_type=$4
WHERE store_id = $1 AND device_id = $2
`

type SetStoreDeviceNameAndDisplayTypeParams struct {
	StoreID     uuid.UUID
	DeviceID    string
	Name        string
	DisplayType string
}

func (q *Queries) SetStoreDeviceNameAndDisplayType(ctx context.Context, arg SetStoreDeviceNameAndDisplayTypeParams) error {
	_, err := q.db.ExecContext(ctx, setStoreDeviceNameAndDisplayType,
		arg.StoreID,
		arg.DeviceID,
		arg.Name,
		arg.DisplayType,
	)
	return err
}
