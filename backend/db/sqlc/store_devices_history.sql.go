// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: store_devices_history.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createStoreDeviceHistory = `-- name: CreateStoreDeviceHistory :one
INSERT INTO store_devices_history (changed_at, changed_type, changed_by, changed_user_agent, changed_client_ip, store_id, device_id, name, real_type, display_type, state, created_at)
SELECT $3, $4, $5, $6, $7, store_id, device_id, name, real_type, display_type, state, created_at
FROM store_devices AS sd
WHERE sd.store_id = $1 AND sd.device_id = $2
RETURNING changed_at, changed_type, changed_by, changed_user_agent, changed_client_ip, store_id, device_id, name, real_type, display_type, state, created_at, history_created_at
`

type CreateStoreDeviceHistoryParams struct {
	StoreID          uuid.UUID
	DeviceID         string
	ChangedAt        int64
	ChangedType      string
	ChangedBy        uuid.NullUUID
	ChangedUserAgent sql.NullString
	ChangedClientIp  sql.NullString
}

func (q *Queries) CreateStoreDeviceHistory(ctx context.Context, arg CreateStoreDeviceHistoryParams) (StoreDevicesHistory, error) {
	row := q.db.QueryRowContext(ctx, createStoreDeviceHistory,
		arg.StoreID,
		arg.DeviceID,
		arg.ChangedAt,
		arg.ChangedType,
		arg.ChangedBy,
		arg.ChangedUserAgent,
		arg.ChangedClientIp,
	)
	var i StoreDevicesHistory
	err := row.Scan(
		&i.ChangedAt,
		&i.ChangedType,
		&i.ChangedBy,
		&i.ChangedUserAgent,
		&i.ChangedClientIp,
		&i.StoreID,
		&i.DeviceID,
		&i.Name,
		&i.RealType,
		&i.DisplayType,
		&i.State,
		&i.CreatedAt,
		&i.HistoryCreatedAt,
	)
	return i, err
}
