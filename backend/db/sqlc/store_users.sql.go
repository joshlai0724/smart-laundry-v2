// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: store_users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createStoreUser = `-- name: CreateStoreUser :one
INSERT INTO store_users (store_id, user_id, role_id, state)
VALUES ($1, $2, $3, $4)
RETURNING store_id, user_id, balance, points, balance_earmark, points_earmark, role_id, state, created_at
`

type CreateStoreUserParams struct {
	StoreID uuid.UUID
	UserID  uuid.UUID
	RoleID  int16
	State   string
}

func (q *Queries) CreateStoreUser(ctx context.Context, arg CreateStoreUserParams) (StoreUser, error) {
	row := q.db.QueryRowContext(ctx, createStoreUser,
		arg.StoreID,
		arg.UserID,
		arg.RoleID,
		arg.State,
	)
	var i StoreUser
	err := row.Scan(
		&i.StoreID,
		&i.UserID,
		&i.Balance,
		&i.Points,
		&i.BalanceEarmark,
		&i.PointsEarmark,
		&i.RoleID,
		&i.State,
		&i.CreatedAt,
	)
	return i, err
}

const getStoreUser = `-- name: GetStoreUser :one
SELECT store_id, user_id, balance, points, balance_earmark, points_earmark, role_id, state, created_at FROM store_users
WHERE store_id = $1 AND user_id = $2
`

type GetStoreUserParams struct {
	StoreID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) GetStoreUser(ctx context.Context, arg GetStoreUserParams) (StoreUser, error) {
	row := q.db.QueryRowContext(ctx, getStoreUser, arg.StoreID, arg.UserID)
	var i StoreUser
	err := row.Scan(
		&i.StoreID,
		&i.UserID,
		&i.Balance,
		&i.Points,
		&i.BalanceEarmark,
		&i.PointsEarmark,
		&i.RoleID,
		&i.State,
		&i.CreatedAt,
	)
	return i, err
}

const getStoreUsersByStoreID = `-- name: GetStoreUsersByStoreID :many
SELECT u.id, u.phone_number, u.name, su.state, su.role_id
FROM store_users su, stores s, users u
WHERE su.store_id = s.id AND su.user_id = u.id AND su.store_id = $1
`

type GetStoreUsersByStoreIDRow struct {
	ID          uuid.UUID
	PhoneNumber string
	Name        string
	State       string
	RoleID      int16
}

func (q *Queries) GetStoreUsersByStoreID(ctx context.Context, storeID uuid.UUID) ([]GetStoreUsersByStoreIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getStoreUsersByStoreID, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStoreUsersByStoreIDRow{}
	for rows.Next() {
		var i GetStoreUsersByStoreIDRow
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.Name,
			&i.State,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setStoreUserBalance = `-- name: SetStoreUserBalance :exec
UPDATE store_users
SET balance = $3, points = $4, balance_earmark = $5, points_earmark = $6
WHERE store_id = $1 AND user_id = $2
`

type SetStoreUserBalanceParams struct {
	StoreID        uuid.UUID
	UserID         uuid.UUID
	Balance        int32
	Points         int32
	BalanceEarmark int32
	PointsEarmark  int32
}

func (q *Queries) SetStoreUserBalance(ctx context.Context, arg SetStoreUserBalanceParams) error {
	_, err := q.db.ExecContext(ctx, setStoreUserBalance,
		arg.StoreID,
		arg.UserID,
		arg.Balance,
		arg.Points,
		arg.BalanceEarmark,
		arg.PointsEarmark,
	)
	return err
}

const setStoreUserRoleID = `-- name: SetStoreUserRoleID :exec
UPDATE store_users
SET role_id = $3
WHERE store_id = $1 AND user_id = $2
`

type SetStoreUserRoleIDParams struct {
	StoreID uuid.UUID
	UserID  uuid.UUID
	RoleID  int16
}

func (q *Queries) SetStoreUserRoleID(ctx context.Context, arg SetStoreUserRoleIDParams) error {
	_, err := q.db.ExecContext(ctx, setStoreUserRoleID, arg.StoreID, arg.UserID, arg.RoleID)
	return err
}

const setStoreUserState = `-- name: SetStoreUserState :exec
UPDATE store_users
SET state = $3
WHERE store_id = $1 AND user_id = $2
`

type SetStoreUserStateParams struct {
	StoreID uuid.UUID
	UserID  uuid.UUID
	State   string
}

func (q *Queries) SetStoreUserState(ctx context.Context, arg SetStoreUserStateParams) error {
	_, err := q.db.ExecContext(ctx, setStoreUserState, arg.StoreID, arg.UserID, arg.State)
	return err
}
