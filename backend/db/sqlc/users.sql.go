// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, phone_number, name, password, role_id, state)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, phone_number, name, password, password_error_count, password_changed_at, role_id, state, created_at
`

type CreateUserParams struct {
	ID          uuid.UUID
	PhoneNumber string
	Name        string
	Password    string
	RoleID      int16
	State       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.PhoneNumber,
		arg.Name,
		arg.Password,
		arg.RoleID,
		arg.State,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Name,
		&i.Password,
		&i.PasswordErrorCount,
		&i.PasswordChangedAt,
		&i.RoleID,
		&i.State,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, phone_number, name, password, password_error_count, password_changed_at, role_id, state, created_at FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Name,
		&i.Password,
		&i.PasswordErrorCount,
		&i.PasswordChangedAt,
		&i.RoleID,
		&i.State,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, phone_number, name, password, password_error_count, password_changed_at, role_id, state, created_at FROM users
WHERE phone_number = $1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Name,
		&i.Password,
		&i.PasswordErrorCount,
		&i.PasswordChangedAt,
		&i.RoleID,
		&i.State,
		&i.CreatedAt,
	)
	return i, err
}

const setUserName = `-- name: SetUserName :exec
UPDATE users
SET name = $2
WHERE id = $1
`

type SetUserNameParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) SetUserName(ctx context.Context, arg SetUserNameParams) error {
	_, err := q.db.ExecContext(ctx, setUserName, arg.ID, arg.Name)
	return err
}

const setUserPasswordAndState = `-- name: SetUserPasswordAndState :exec
UPDATE users
SET password = $2, password_error_count = $3, password_changed_at = $4, state = $5
WHERE id = $1
`

type SetUserPasswordAndStateParams struct {
	ID                 uuid.UUID
	Password           string
	PasswordErrorCount int16
	PasswordChangedAt  sql.NullInt64
	State              string
}

func (q *Queries) SetUserPasswordAndState(ctx context.Context, arg SetUserPasswordAndStateParams) error {
	_, err := q.db.ExecContext(ctx, setUserPasswordAndState,
		arg.ID,
		arg.Password,
		arg.PasswordErrorCount,
		arg.PasswordChangedAt,
		arg.State,
	)
	return err
}
