// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users_history.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUserHistory = `-- name: CreateUserHistory :one
INSERT INTO users_history (changed_at, changed_type, changed_by, changed_user_agent, changed_client_ip, user_id, phone_number, name, password, password_error_count, password_changed_at, role_id, state, created_at)
SELECT $2, $3, $4, $5, $6, id, phone_number, name, password, password_error_count, password_changed_at, role_id, state, created_at
FROM users AS u
WHERE u.id = $1
RETURNING changed_at, changed_type, changed_by, changed_user_agent, changed_client_ip, user_id, phone_number, name, password, password_error_count, password_changed_at, role_id, state, created_at, history_created_at
`

type CreateUserHistoryParams struct {
	ID               uuid.UUID
	ChangedAt        int64
	ChangedType      string
	ChangedBy        uuid.NullUUID
	ChangedUserAgent sql.NullString
	ChangedClientIp  sql.NullString
}

func (q *Queries) CreateUserHistory(ctx context.Context, arg CreateUserHistoryParams) (UsersHistory, error) {
	row := q.db.QueryRowContext(ctx, createUserHistory,
		arg.ID,
		arg.ChangedAt,
		arg.ChangedType,
		arg.ChangedBy,
		arg.ChangedUserAgent,
		arg.ChangedClientIp,
	)
	var i UsersHistory
	err := row.Scan(
		&i.ChangedAt,
		&i.ChangedType,
		&i.ChangedBy,
		&i.ChangedUserAgent,
		&i.ChangedClientIp,
		&i.UserID,
		&i.PhoneNumber,
		&i.Name,
		&i.Password,
		&i.PasswordErrorCount,
		&i.PasswordChangedAt,
		&i.RoleID,
		&i.State,
		&i.CreatedAt,
		&i.HistoryCreatedAt,
	)
	return i, err
}
