// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: ver_codes.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const blockVerCodes = `-- name: BlockVerCodes :exec
UPDATE ver_codes
SET is_blocked = TRUE
WHERE id = $1
`

func (q *Queries) BlockVerCodes(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, blockVerCodes, id)
	return err
}

const createVerCode = `-- name: CreateVerCode :one
INSERT INTO ver_codes (id, phone_number, code, type, request_id, expired_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, phone_number, code, type, is_blocked, request_id, expired_at, create_at
`

type CreateVerCodeParams struct {
	ID          uuid.UUID
	PhoneNumber string
	Code        string
	Type        string
	RequestID   string
	ExpiredAt   int64
}

func (q *Queries) CreateVerCode(ctx context.Context, arg CreateVerCodeParams) (VerCode, error) {
	row := q.db.QueryRowContext(ctx, createVerCode,
		arg.ID,
		arg.PhoneNumber,
		arg.Code,
		arg.Type,
		arg.RequestID,
		arg.ExpiredAt,
	)
	var i VerCode
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Code,
		&i.Type,
		&i.IsBlocked,
		&i.RequestID,
		&i.ExpiredAt,
		&i.CreateAt,
	)
	return i, err
}

const getVerCodesByTypeAndCode = `-- name: GetVerCodesByTypeAndCode :many
SELECT id, phone_number, code, type, is_blocked, request_id, expired_at, create_at FROM ver_codes
WHERE type = $1 AND code = $2
`

type GetVerCodesByTypeAndCodeParams struct {
	Type string
	Code string
}

func (q *Queries) GetVerCodesByTypeAndCode(ctx context.Context, arg GetVerCodesByTypeAndCodeParams) ([]VerCode, error) {
	rows, err := q.db.QueryContext(ctx, getVerCodesByTypeAndCode, arg.Type, arg.Code)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VerCode{}
	for rows.Next() {
		var i VerCode
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.Code,
			&i.Type,
			&i.IsBlocked,
			&i.RequestID,
			&i.ExpiredAt,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVerCodesByTypeAndPhoneNumber = `-- name: GetVerCodesByTypeAndPhoneNumber :many
SELECT id, phone_number, code, type, is_blocked, request_id, expired_at, create_at FROM ver_codes
WHERE type = $1 AND phone_number = $2 AND create_at >= $3
`

type GetVerCodesByTypeAndPhoneNumberParams struct {
	Type        string
	PhoneNumber string
	FromTs      int64
}

func (q *Queries) GetVerCodesByTypeAndPhoneNumber(ctx context.Context, arg GetVerCodesByTypeAndPhoneNumberParams) ([]VerCode, error) {
	rows, err := q.db.QueryContext(ctx, getVerCodesByTypeAndPhoneNumber, arg.Type, arg.PhoneNumber, arg.FromTs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VerCode{}
	for rows.Next() {
		var i VerCode
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.Code,
			&i.Type,
			&i.IsBlocked,
			&i.RequestID,
			&i.ExpiredAt,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVerCodesByTypeAndPhoneNumberAndCode = `-- name: GetVerCodesByTypeAndPhoneNumberAndCode :many
SELECT id, phone_number, code, type, is_blocked, request_id, expired_at, create_at FROM ver_codes
WHERE type = $1 AND phone_number = $2 AND code = $3
`

type GetVerCodesByTypeAndPhoneNumberAndCodeParams struct {
	Type        string
	PhoneNumber string
	Code        string
}

func (q *Queries) GetVerCodesByTypeAndPhoneNumberAndCode(ctx context.Context, arg GetVerCodesByTypeAndPhoneNumberAndCodeParams) ([]VerCode, error) {
	rows, err := q.db.QueryContext(ctx, getVerCodesByTypeAndPhoneNumberAndCode, arg.Type, arg.PhoneNumber, arg.Code)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VerCode{}
	for rows.Next() {
		var i VerCode
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.Code,
			&i.Type,
			&i.IsBlocked,
			&i.RequestID,
			&i.ExpiredAt,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
